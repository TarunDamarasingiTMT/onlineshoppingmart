package daoimpl;

import dao.CartDao;
import model.Inventory;

import java.sql.*;
import java.sql.Date;
import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

public class CartDaoImpl implements CartDao {
    private final Connection connection;
    private final InventoryDaoImpl inventoryDAO;

    public CartDaoImpl(Connection connection) {
        this.connection = connection;
        this.inventoryDAO = new InventoryDaoImpl(connection);
    }

    @Override
    public void addItemToCart(int userId, int itemId, int quantity) throws SQLException {
        Inventory item = inventoryDAO.getItemById(itemId);

        //validation
        if (item == null) {
            System.out.println("Item not found.");
            return;
        }

        int stock = item.getStock();
        if (stock >= quantity) {
            String query = "INSERT INTO Cart (user_id, item_id, quantity, last_updated) VALUES (?, ?, ?, ?)";
            try (PreparedStatement ps = connection.prepareStatement(query)) {
                ps.setInt(1, userId);
                ps.setInt(2, itemId);
                ps.setInt(3, quantity);
                ps.setDate(4, Date.valueOf(LocalDate.now()));
                ps.executeUpdate();
                System.out.println("Item added to the cart successfully.");
            } catch (SQLException e) {
                System.out.println("Error adding item to cart: " + e.getMessage());
                throw new SQLException();
            }
        } else {
            System.out.println("Not enough stock available for the requested quantity.");
        }
    }

    @Override
    public void removeItemFromCart(int userId, int itemId, int quantity) throws SQLException {
        String query = "UPDATE Cart SET quantity = quantity - ? WHERE user_id = ? AND item_id = ? AND quantity >= ?";
        try (PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setInt(1, quantity);
            ps.setInt(2, userId);
            ps.setInt(3, itemId);
            ps.setInt(4, quantity);
            int rowsUpdated = ps.executeUpdate();

            if (rowsUpdated == 0) {
                System.out.println("Error: Item not found or insufficient quantity in cart.");
            } else {
                System.out.println("Item removed from the cart successfully.");
            }
        } catch (SQLException e) {
            System.out.println("Error at : removeItemFromCart " + e.getMessage());
            throw new SQLException();
        }
    }

    @Override
    public void viewTheCart(int userId) throws SQLException {
        String query = "SELECT Cart.item_id, Inventory.name, Cart.quantity, Inventory.price " +
                "FROM Cart INNER JOIN Inventory ON Cart.item_id = Inventory.item_id WHERE Cart.user_id = ?";

        try (PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setInt(1, userId);
            try (ResultSet rs = ps.executeQuery()) {
                List<CartItem> cartItems = new ArrayList<>();
                while (rs.next()) {
                    int itemId = rs.getInt("item_id");
                    String itemName = rs.getString("name");
                    int quantity = rs.getInt("quantity");
                    float price = rs.getFloat("price");
                    cartItems.add(new CartItem(itemId, itemName, quantity, price));
                }

                double total = cartItems.stream()
                        .mapToDouble(item -> item.getQuantity() * item.getPrice())
                        .sum();

                System.out.println("Items in your cart:");

                cartItems.forEach(item -> {
                    double subtotal = item.getQuantity() * item.getPrice();
                    System.out.println(item.getItemId() + ". " + item.getItemName() + " - Quantity: " + item.getQuantity() +
                            " - Price: $" + item.getPrice() + " - Subtotal: $" + subtotal);
                });
                System.out.println("Total cost of cart: $" + total);
            }
        } catch (SQLException e) {
            System.out.println("Error viewing cart: " + e.getMessage());
            throw new SQLException();
        }
    }

    @Override
    public float getCartTotal(int userId) throws SQLException {
        String query = "SELECT SUM(Inventory.price * Cart.quantity) AS total_amount " +
                "FROM Cart INNER JOIN Inventory ON Cart.item_id = Inventory.item_id WHERE Cart.user_id = ?";

        try (PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setInt(1, userId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getFloat("total_amount");
                }
            }
        } catch (SQLException e) {
            System.out.println("Error getting cart total: " + e.getMessage());
            throw new SQLException();
        }
        return 0.0F;
    }

    public void exportToOrderItems(int userId, int orderId) throws SQLException {
        // Export items from cart to order_items
        String query = "INSERT INTO order_items (order_id, item_id, quantity) " +
                "SELECT ?, item_id, quantity FROM cart WHERE user_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, orderId);
            stmt.setInt(2, userId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        // Clear cart after exporting
        clearCart(userId);
    }

    public boolean isUserAssociatedWithCart(int userId) throws SQLException {
        String query = "SELECT COUNT(*) FROM cart WHERE user_id = ?";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setInt(1, userId);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    return resultSet.getInt(1) > 0;
                }
            }
        } catch (SQLException e) {
            throw new SQLException(e);
        }
        return false;
    }

    @Override
    public void clearCart(int userId) throws SQLException {
        String query = "DELETE FROM Cart WHERE user_id = ?";
        try (PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setInt(1, userId);
            ps.executeUpdate();
        } catch (SQLException e) {
            System.out.println("Error clearing cart: " + e.getMessage());
            throw new SQLException();
        }
    }

    public Connection getConnection() {
        return connection;
    }

    // Inner class to represent a CartItem
    private static class CartItem {
        private final int itemId;
        private final String itemName;
        private final int quantity;
        private final float price;

        public CartItem(int itemId, String itemName, int quantity, float price) {
            this.itemId = itemId;
            this.itemName = itemName;
            this.quantity = quantity;
            this.price = price;
        }

        public int getItemId() {
            return itemId;
        }

        public String getItemName() {
            return itemName;
        }

        public int getQuantity() {
            return quantity;
        }

        public float getPrice() {
            return price;
        }
    }
}
___________________________________ 


package daoimpl;

import dao.OrderHistoryDao;
import java.sql.*;
import java.time.LocalDate;
import java.util.*;
import model.OrderHistory;


public class OrderHistoryDaoImpl implements OrderHistoryDao {
    private final Connection connection;

    public OrderHistoryDaoImpl(Connection connection) {
        this.connection = connection;
    }

    @Override
    public int addOrderToHistory(int userId, float totalAmount) throws SQLException {
        String query = "INSERT INTO OrderHistory (user_id, total_amount, timestamp) VALUES (?, ?, ?)";
        try (PreparedStatement ps = connection.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS)) {
            ps.setInt(1, userId);
            ps.setFloat(2, totalAmount);
            ps.setObject(3, LocalDate.now());
            ps.executeUpdate();

            try (ResultSet rs = ps.getGeneratedKeys()) {
                if (rs.next()) {
                    return rs.getInt(1);  // Return the generated order_id
                }
            }
        } catch (SQLException e) {
            System.err.println("Error adding order history: " + e.getMessage());
            throw new SQLException("Error adding order to history", e);
        }
        return -1;  //-1 will be return if no ID was generated
    }

    @Override
    public void getOrderHistory(int userId) throws SQLException {
        String query = "SELECT order_id, total_amount, timestamp FROM OrderHistory WHERE user_id = ? ORDER BY timestamp DESC";
        try (PreparedStatement ps = connection.prepareStatement(query)) {
            ps.setInt(1, userId);
            try (ResultSet rs = ps.executeQuery()) {
                // Check if result set is empty
                List<OrderHistory> orderHistoryList = new ArrayList<>();
                while (rs.next()) {
                    int orderId = rs.getInt("order_id");
                    float totalAmount = rs.getFloat("total_amount");
                    LocalDate timestamp = rs.getObject("timestamp", LocalDate.class);
                    orderHistoryList.add(new OrderHistory(orderId, totalAmount, timestamp));
                }

                // If there are no orders, print a message
                if (orderHistoryList.isEmpty()) {
                    System.out.println("No orders found for userId: " + userId);
                    return;
                }

                // Using Streams to print the order history in a structured way

                System.out.println("Order History for User ID: " + userId);
                orderHistoryList.stream().forEach(order -> {
                            System.out.println("Order ID: " + order.getOrderId());
                            System.out.println("Total Cost: $" + order.getTotalAmount());
                            System.out.println("Order Date: " + order.getTimestamp());
                            System.out.println("-------------------------------");
                        });
            }
        } catch (SQLException e) {
            System.err.println("Error fetching order history: " + e.getMessage());
            throw new SQLException(e);
        }
    }

}
